おいはずんだどんごわす！飯を食うでごわす！
きょうは2024ねん12がつ11にち、すいようびごわす！  きょうは、最新の技術ネタを、おいが勝手に冷蔵庫あけて食うみたいに、ガッツリ紹介するでごわす！
----
じゃ、さっそく今日の記事紹介にいくでごわす！  全部で2本あるごわす！
----
1本めは、「ユービーにおけるLLMを活用した不具合分析とテスト戦略立案プロセス」ごわす！
これは、ユービーという会社が、AIの力、つまりLLMを使ってアプリのバグを分析し、テストの方法を改善した話ごわす！  リアクト ネイティブというアプリを作っとったんだけど、フロントエンドのテストが全然足りなくて、バグだらけやったとよ！  バックエンドはしっかりテストしとったのにね！
そこで、2ヶ月分のバグデータを使って、アンスロピック社のクロードっていうAIを使って分析したとよ！  「ゴールシークプロンプト」っていう方法でAIと会話しながら、分析に合う質問をAIと一緒に考えていったごわす！  そしたら、バグの原因とか、数がどれくらいか、どこでバグが起きとるか、どうすれば直せるか、全部AIがまとめてくれたとよ！  約2.5時間で結果が出たごわす！  すごかろう？
分析の結果、UI/UX関連のバグが32%もあったことがわかったごわす！  そして、ユニットテストとインテグレーションテストを導入すれば、バグの58%は開発の早い段階で防げるって結論が出たごわす！  AIの計算によると、最初は開発時間が10%伸びるかもしれんけど、長期的に見れば、1回アプリをリリースするごとに15%も時間が短縮できるって予測も出たごわす！
LLMを使ったメリットは、客観的なデータに基づいて素早く判断できること、コストが安く済むこと、そして新しいAIの使い方を発見できることごわす！  この結果を開発チームに伝えたら、みんなテストをまじめにやり始めて、会社全体の雰囲気も変わったごわす！  これは、AIが開発の道具としてだけでなく、会社全体のやり方や雰囲気を変える力もあるってことを示しとるごわす！  すごいごわす！  今後は、E2Eテストの改善とか、バグを分析して改善するサイクルを作っていく予定ごわす！
----
こりゃあ、すごいごわす！  AIが開発をこんなに効率化してくれるとはな！  おいも、技術室でAI使っとるけど、こんな高度な使い方は思いつかんかったごわす！  もっと勉強せんなんもす！
----
2本めは、「リアクト19: useOptimisticを用いた楽観的UI更新と内部実装の解説」ごわす！
リアクト19っていう新しいリアクトのバージョンで、`useOptimistic`っていう便利なフックが追加されたごわす！  これは、サーバーからの返事を待つ前に、画面を先に更新してくれる機能ごわす！  ユーザーはすぐに画面の変化がわかって、使いやすいごわす！
`useOptimistic`は、初期状態と状態更新のやり方を決める関数を使って、楽観的な状態と状態更新の関数を返すごわす！  非同期処理と組み合わせると、フォームとかで便利ごわす！  サーバーからの返事が来る前に画面が更新されるから、ユーザーはすぐに結果がわかるごわす！  でも、サーバーの返事と画面の状態がずれる可能性もあるし、エラー処理もちゃんとせんなんもす！
内部の仕組みは複雑でごわすけど、`updateReducerImpl`っていう関数が状態の更新と計算で重要な役割を果たしとるごわす！  `useOptimistic`は`ユーシルードサー`と似てるけど、画面の更新のタイミングとか、`パストルース`値っていう特別な値の扱いが違うごわす！
`useOptimistic`と`useState`の違いは、画面更新のタイミングと`パストルース`値の扱い方ごわす！  連続した操作には、ボタンを一時的に無効にしたり、読み込み中を表示するなどの工夫が必要ごわす！  `useTransition`とか`startTransition`と組み合わせると、もっと使いやすくなるごわす！
`useOptimistic`は便利だけど、エラー処理とか状態管理はしっかりせんなんもす！  サーバーからの返事と画面の状態が一致するように注意せんなんもす！
----
ふむふむ、これは便利そうごわす！  おいの作っとるシステムにも応用できそうごわす！  早速試してみようでごわす！
----
今日の放送はここまでごわす！  きょうは、ユービーのLLMを使ったバグ分析と、リアクト19の`useOptimistic`フックについて紹介したごわす！  また、おいはずんだどんの冷蔵庫の中身みたいに、色んな技術ネタを紹介していくごわすけん、聴いてくれると嬉しいごわす！  番組への感想も送ってくれると嬉しいごわす！  また明日ごわす！
