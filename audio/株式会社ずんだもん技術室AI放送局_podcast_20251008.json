[
    {
        "type": "title",
        "title": "ずんだもん技術室AI放送局",
        "date": "2025.10.08",
        "notes": "こんちにわ！「株式会社ずんだもん技術室AI放送局」の時間なのだ。\nぼく、MCのずんだもんだのだ！さあ、今日、2025年10月8日水曜日は、どんなニュースが飛び込んでくるのかな？今日の放送でわ、今トレンドになっているエーアイに関する記事をいくつか紹介していくのだ！",
        "slidenum": 0,
        "start_ms": 0,
        "end_ms": 31732
    },
    {
        "type": "content",
        "title": "本日のAIニュース",
        "points": [
            "1. Google DeepMindの新AI「CodeMender」",
            "2. 成功するAIエージェントの5%の秘密",
            "3. LangChainが考えるワークフローの未来"
        ],
        "notes": "今日わ、みんなに3つの記事を紹介するのだ。\nエーアイの最新技術や、エーアイを実際に使う上で大事なことなんかがわかる、面白い内容ばかりなのだ！",
        "slidenum": 1,
        "start_ms": 31732,
        "end_ms": 41010
    },
    {
        "type": "section",
        "sectionNo": 1,
        "title": "Google DeepMindの新AI「CodeMender」",
        "url": "https://deepmind.google/discover/blog/introducing-codemender-an-ai-agent-for-code-security/",
        "notes": "----まず1つ目の記事わ、これなのだ！タイトルわ、「グーグル ディープマインドがコードセキュリティのためのあたらしいエーアイエージェント「コウドメンダー」を発表」なのだ。",
        "slidenum": 2,
        "start_ms": 41010,
        "end_ms": 54544
    },
    {
        "type": "content",
        "title": "コードの脆弱性を自動修正するAIエージェント",
        "subhead": "Google DeepMindが発表した「CodeMender」は、ソフトウェアのセキュリティを自動で強化する画期的なツール",
        "points": [
            "AIの力でコードの脆弱性を自動で発見・修正",
            "人間の手による脆弱性対応の限界という課題を解決"
        ],
        "notes": "えーと、グーグル ディープマインドさんが、すごいエーアイエージェントを発表したのだ！その名も「コウドメンダー（コードメンダー）」！これはね、ソフトウェアのセキュリティを自動で強くしてくれる、画期的なツールなのだ。",
        "slidenum": 3,
        "start_ms": 54544,
        "end_ms": 71897
    },
    {
        "type": "content",
        "title": "増大するソフトウェアのセキュリティ課題",
        "subhead": "なぜ今、CodeMenderのようなAIエージェントが必要なのか",
        "points": [
            "脆弱性の発見と修正作業は非常に[[困難で多くの時間と労力]]を要する",
            "従来の自動チェックツール（ファジング等）には限界がある",
            "AIによる高度な脆弱性発見技術の進化に対し、人間だけの対応は[[非現実的]]"
        ],
        "notes": "今って、プログラムの中に潜んでる危ないところ、つまり「ぜいじゃくせい」を見つけて直すのが、すっごく大変なのだ。\n人間だけで全部やるのは、もう無理ゲーになっちゃってるくらいなのだ。",
        "slidenum": 4,
        "start_ms": 71897,
        "end_ms": 87711
    },
    {
        "type": "compare",
        "title": "CodeMenderの2つのアプローチ",
        "subhead": "即時修正と根本的改善でコードセキュリティを強化",
        "leftTitle": "リアクティブ（即時修正）",
        "rightTitle": "プロアクティブ（根本的改善）",
        "leftItems": [
            "新しく見つかった脆弱性を[[素早く自動で修正]]"
        ],
        "rightItems": [
            "既存コードをより安全な形に書き換え",
            "将来の脆弱性の発生を[[未然に防止]]",
            "特定の脆弱性を根本からなくす大規模改修も実施"
        ],
        "notes": "そこでコードメンダーの出番なのだ！このエーアイは、大きく分けて2つの方法でコードを安全にしてくれるのだ。\n1つは、新しく見つかったぜいじゃくせいをすぐさま自動で直す「すぐに直す」やり方なのだ。\nもう1つは、あらかじめコードを安全な形に書き換えて、将来のぜいじゃくせい発生を防ぐ「まえもって防ぐ」やり方なのだ。",
        "slidenum": 5,
        "start_ms": 87711,
        "end_ms": 115502
    },
    {
        "type": "content",
        "title": "CodeMenderを支えるコア技術",
        "subhead": "Googleの最先端AIモデル「Gemini Deep Think」をベースに構築",
        "points": [
            "人間のようにコードを深く思考し、複雑な問題を解決する能力",
            "複数の特化型AIエージェントが連携する[[マルチエージェントシステム]]を採用",
            "修正後の機能低下（デグレード）を検証するエージェントも存在"
        ],
        "notes": "コードメンダーは、グーグルの最先端エーアイモデル「ジェミニディープシンク」をベースにしているから、まるで人間みたいにコードを深く考えて、複雑な問題も解決できるのだよ。\nたくさんのエーアイがたがいに協力し合うしくみで、複雑な問題にも効率的に対応するのだ。\n修正した後も、ちゃんと元通りの機能が動くか（「機能がおちていないか」）も自動で確認してくれるのだよ。",
        "slidenum": 6,
        "start_ms": 115502,
        "end_ms": 147282
    },
    {
        "type": "diagram",
        "title": "多様な分析手法を組み合わせた脆弱性特定",
        "subhead": "高度なプログラム分析技術を駆使し、脆弱性の根本原因や設計上の弱点を特定",
        "lanes": [
            {
                "title": "解析技術",
                "items": [
                    "静的解析",
                    "動的解析",
                    "差分テスト",
                    "ファジング"
                ]
            },
            {
                "title": "論理解決",
                "items": [
                    "SMTソルバー"
                ]
            }
        ],
        "slidenum": 7,
        "start_ms": 147282,
        "end_ms": 157282
    },
    {
        "type": "content",
        "title": "徹底的な自動検証と開発者の負担軽減",
        "subhead": "生成されたコード変更は、様々な観点から品質が保証される",
        "points": [
            "**根本原因**が解決されているか",
            "**機能**が壊れていないか（デグレード防止）",
            "**コーディング規約**に沿っているか",
            "人間は検証済みの[[質の高いパッチ]]のみを最終確認"
        ],
        "notes": "グーグル ディープマインドは、コードメンダーを使って、オープンソースプロジェクトにセキュリティ修正を提供してきたそうなのだ！最終的に開発者が確認するのは、このエーアイが完璧に検証した「質の高いパッチ」だけだから、開発者の負担がぐっと減るのだ！",
        "slidenum": 8,
        "start_ms": 157282,
        "end_ms": 168720
    },
    {
        "type": "kpi",
        "title": "実績と今後の展望",
        "subhead": "すでにオープンソースプロジェクトに貢献。将来的には全開発者が利用できるツールを目指す",
        "columns": 3,
        "items": [
            {
                "label": "OSSへの貢献数",
                "value": "72件",
                "change": "増加中",
                "status": "good"
            },
            {
                "label": "最大コードベース",
                "value": "450万行",
                "change": "大規模",
                "status": "good"
            },
            {
                "label": "最終目標",
                "value": "全開発者へ提供",
                "change": "予定",
                "status": "neutral"
            }
        ],
        "notes": "今はまだ人間が最終レビューをしているけど、ゆくゆくは、すべての開発者が使えるツールとしてリリースして、世界のソフトウェアがもっともっと安全になることを目指しているのだって！\nこれって、ぼくみたいに、ずんだアローで悪いバグを直しちゃう感じなのだ！人間が見るのは最終確認だけなんて、すごいのだ。\nぼくたちのずんだもん技術室でも、コードメンダーみたいなエーアイがあれば、もっとたくさんの人たちの役に立てるようになるなのだ。\n将来、ぼくたちの技術室でも使いたいなのだ！",
        "slidenum": 9,
        "start_ms": 168720,
        "end_ms": 207634
    },
    {
        "type": "section",
        "sectionNo": 2,
        "title": "成功するAIエージェントの5%の秘密",
        "url": "https://www.motivenotes.ai/p/what-makes-5-of-ai-agents-actually",
        "notes": "----続いて2つ目の記事わ、これなのだ！タイトルわ、「\nWhat Makes 5%of AI Agents Actually Work in Production?\n」なのだ。",
        "slidenum": 10,
        "start_ms": 207634,
        "end_ms": 220032
    },
    {
        "type": "quote",
        "title": "なぜ95%のAIエージェントは失敗するのか？",
        "text": "AIエージェントが実際に製品として使えるようになるのは、[[たった5%]]しかない。失敗のほとんどは、AIを支える**周辺システム**がうまくできていないのが原因だ。",
        "author": "Motive Notes AI 記事より",
        "notes": "みんな、エーアイエージェントが実際に製品として使えるようになるのは、実はたった5%くらいしかないって知っていたかな？この記事は、その成功するエーアイエージェントが何をしているのかをわかりやすく教えてくれるのだ。\n多くの人は、エーアイの賢さ、つまりモデルの性能がいちばん大事だって思いがちだよね。\nでも、失敗原因のほとんどは、そのエーアイを支える「周辺システム」がうまくできていないことにあるそうなのだ。",
        "slidenum": 11,
        "start_ms": 220032,
        "end_ms": 255215
    },
    {
        "type": "bulletCards",
        "title": "成功の鍵(1): 「文脈（コンテキスト）」の重要性",
        "items": [
            {
                "title": "モデルは土壌、コンテキストは種",
                "desc": "高性能なモデルがあっても、適切な[[文脈情報]]を与えなければ良い結果は生まれない"
            },
            {
                "title": "高度なコンテキストエンジニアリング",
                "desc": "RAG技術を使い、必要な情報だけを厳選・整理・検証することが求められる"
            },
            {
                "title": "具体的手法",
                "desc": "選択的プルーニング、データの鮮度チェック、情報源の追跡など"
            }
        ],
        "notes": "特に大事なのが「ぶんみゃく」なのだ！「モデルは土壌、ぶんみゃくは種」って言葉があるのだって。\nどんなに高性能なエーアイモデル（土壌）があっても、適切な「ぶんみゃく情報（種）」を与えなければ、良い結果は生まれないのだ。\n最近よく聞く「けんさくきょうかデータ生成」って技術が重要だけど、ただ情報を集めるだけじゃダメなのだ。\n必要な情報だけを厳選して、正しく整理して、そして検証することが求められるのだよ。",
        "slidenum": 12,
        "start_ms": 255215,
        "end_ms": 292977
    },
    {
        "type": "bulletCards",
        "title": "成功の鍵(2): セキュリティと信頼性の確保",
        "items": [
            {
                "title": "アクセス権限管理",
                "desc": "誰がどの情報にアクセスできるかを厳密に管理"
            },
            {
                "title": "リネージ（来歴）の確保",
                "desc": "AIの出力がどの情報源に基づいているかを[[追跡可能]]に"
            },
            {
                "title": "Human-in-the-loop",
                "desc": "人間がアシスタントとしてAIを使い、[[最終判断]]を下す設計が信頼を得る上で不可欠"
            }
        ],
        "notes": "それから、セキュリティと信頼性もとっても重要だ。\n情報がどこからきたのかがわかる「情報の流れ」っていう仕組みも必須なのだ。\nそして、エーアイが人間をサポートして、人間が最終的な判断を下す「人間が最後にチェックする」設計が、ユーザーからの信頼を得る上で欠かせないのだって！",
        "slidenum": 13,
        "start_ms": 292977,
        "end_ms": 304087
    },
    {
        "type": "headerCards",
        "title": "成功の鍵(3): メモリ管理とモデルの使い分け",
        "columns": 2,
        "items": [
            {
                "title": "メモリ管理の課題",
                "desc": "過去の対話や好みを記憶しつつ、プライバシーをどう守るかが重要"
            },
            {
                "title": "モデルオーケストレーション",
                "desc": "タスクに応じて複数のAIモデル（高速安価/高性能）を賢く使い分ける技術"
            }
        ],
        "notes": "あとわ、エーアイエージェントが過去のやり取りを覚える「メモリ」の管理も難しい課題なのだ。\nユーザーごとに、チームごとに、どうやってプライバシーを守りながらメモリを使うか。\nそれに、すべてのタスクに同じ高性能なエーアイモデルを使うのは効率的じゃないから、簡単な質問にははやくて安価なモデルを、複雑な分析には高性能なモデルを使うっていう「最適なモデルを選ぶしくみ」の技術も進化しているのだ。",
        "slidenum": 14,
        "start_ms": 304087,
        "end_ms": 352464
    },
    {
        "type": "content",
        "title": "成功の鍵(4): 自然言語とGUIの適切な使い分け",
        "subhead": "何でもかんでもチャット形式が良いわけではない",
        "twoColumn": true,
        "columns": [
            [
                "**自然言語（チャット）が有効な場面**",
                "複雑なデータ分析の初期質問",
                "学習コストの削減"
            ],
            [
                "**GUI（画面操作）が有効な場面**",
                "回答結果の微調整（例: チャートの種類変更）",
                "直感的な操作"
            ]
        ],
        "notes": "エーアイエージェントと対話する時にわ、なんでもかんでもチャット形式が良いわけじゃないのだ。\nたとえば、複雑なデータ分析では、自然言語で質問するときの学習コストを減らせるけど、一度答えが出たら、グラフの種類を変えるみたいな微調整は、画面操作で行いたいものなのだ。\nユーザーのニーズに合わせて、自然言語と画面操作を組み合わせた設計が重要になるのだよ。",
        "slidenum": 15,
        "start_ms": 352464,
        "end_ms": 383103
    },
    {
        "type": "cards",
        "title": "これからのAI開発で重要なこと",
        "subhead": "モデルの性能だけでなく、周辺要素の設計が成功を左右する",
        "columns": 2,
        "items": [
            "質の高いコンテキスト",
            "適切なメモリ設計",
            "信頼性の高いオーケストレーション",
            "ユーザーが信頼できるUX"
        ],
        "notes": "これからのエーアイ開発では、モデルの性能だけじゃなくて、「質の高いぶんみゃく」「適切なメモリ設計」「信頼性の高い最適なモデルを選ぶしくみ」「ユーザーが信頼できるユーザー体験」といった周辺要素が、エーアイエージェントの成功を左右するんだって！\nへえ、エーアイモデルだけじゃダメなんだなのだ！まるで、ずんだ餅の餡だけじゃなくて、お餅も大事なのと同じなのだ！ぶんみゃくって難しいけど、ぼくたちが普段エーアイを触るときも、ちゃんと言葉を選ぶことが大事ってことなのだね。\n人間が最終確認するのが大事って、納得なのだ！ぼくも、もっと頑張って、みんなが使いやすいエーアイエージェントを考えたいなのだ！",
        "slidenum": 16,
        "start_ms": 383103,
        "end_ms": 434595
    },
    {
        "type": "section",
        "sectionNo": 3,
        "title": "LangChainが考えるワークフローの未来",
        "url": "https://blog.langchain.com/not-another-workflow-builder/",
        "notes": "----さあ、今日最後の3つ目の記事わ、これなのだ！タイトルわ、「ノット アナザー ワークフロー ビルダー」なのだ。",
        "slidenum": 17,
        "start_ms": 434595,
        "end_ms": 445270
    },
    {
        "type": "content",
        "title": "なぜLangChainはビジュアルビルダーを作らないのか",
        "subhead": "ノーコードのワークフロービルダーは、非技術者がAIエージェントを構築する目的を持つ",
        "points": [
            "技術者不足の解消",
            "非技術者が持つ[[具体的な業務知識]]をAI開発に活用"
        ],
        "notes": "この記事はね、ラングチェーンっていうエーアイ開発のツールを作っているチームが、なぜこれまでビジュアルワークフロービルダーの開発に積極的じゃなかったのか、そしてこれから何に力を入れていくのかを解説しているのだ。\nノーコードのワークフロービルダーって、主に技術者じゃない人がエーアイエージェントを簡単に作れるようにするのが目的なのだ。\nこれで、技術者が足りない問題も解決できるし、いろんな業務の知識を持った人が、直接エーアイシステム開発に活かせるようになるって期待されているのだよ。",
        "slidenum": 18,
        "start_ms": 445270,
        "end_ms": 484400
    },
    {
        "type": "compare",
        "title": "「ワークフロー」と「エージェント」の違い",
        "subhead": "どちらも「期待通りに動く信頼性の高いシステム」の構築を目指す",
        "leftTitle": "ワークフロー (Workflow)",
        "rightTitle": "エージェント (Agent)",
        "leftItems": [
            "**予測可能性**: 高い",
            "**柔軟性**: 低い",
            "決められた手順に沿って動作",
            "複雑な分岐を「グラフ」で表現"
        ],
        "rightItems": [
            "**予測可能性**: 低い",
            "**柔軟性**: 高い",
            "自律的に判断して行動",
            "複雑なロジックを「プロンプト」に抽象化"
        ],
        "notes": "ここで大事なのが「ワークフロー」と「エージェント」の違いなのだ。\n「ワークフロー」はね、決められた手順に沿って動くから、結果が「予測しやすく」て安定しているけど、柔軟性は低いのだ。\n複雑な処理を「グラフ」として視覚的に表現するイメージなのだ。\n一方、「エージェント」は、自律的に判断して行動するから柔軟性が高いのだけど、結果が予測しにくい側面もあるのだ。\nその複雑なロジックは、自然言語の「プロンプト」に抽象化されるのだよ。\nどちらも、目指すのは「期待通りに動く信頼性の高いシステム」を作ることなのだ。",
        "slidenum": 19,
        "start_ms": 484400,
        "end_ms": 533998
    },
    {
        "type": "content",
        "title": "既存ツールは真のエージェントビルダーではない？",
        "subhead": "筆者は、OpenAIのAgentKitなども含め、既存の類似ツールは「ビジュアルワークフロービルダー」であると指摘",
        "slidenum": 20,
        "start_ms": 533998,
        "end_ms": 543998
    },
    {
        "type": "headerCards",
        "title": "ビジュアルワークフロービルダーの課題",
        "columns": 2,
        "items": [
            {
                "title": "依然として高い参入障壁",
                "desc": "非技術者にとって、ノードとエッジを使いこなすのは決して簡単ではない"
            },
            {
                "title": "複雑性への対応限界",
                "desc": "タスクが複雑になると、ノードとエッジが画面上で錯綜し、管理が非常に困難になる"
            }
        ],
        "notes": "ビジュアルワークフロービルダーには、いくつか課題があるのだよ。\n1.**参入障壁が高い**:技術者じゃない人にとっても、「点」とか「線」を使いこなすのはやっぱり難しくて、決して簡単じゃないのだ。\n2.**複雑なタスクに対応しにくい**:ある程度複雑になると、画面上が「点」と「線」でごちゃごちゃになって、管理するのがすごく難しくなるのだ。",
        "slidenum": 21,
        "start_ms": 543998,
        "end_ms": 583727
    },
    {
        "type": "statsCompare",
        "title": "問題の複雑度に応じた最適なアプローチ",
        "leftTitle": "高複雑度タスク",
        "rightTitle": "低複雑度タスク",
        "stats": [
            {
                "label": "最適な手法",
                "leftValue": "[[コードによるワークフロー]] (例: LangGraph)",
                "rightValue": "[[ノーコードエージェント]] (プロンプト+ツール)"
            },
            {
                "label": "今後の進化",
                "leftValue": "AIによるコード生成で障壁が低下",
                "rightValue": "モデル性能向上で対応範囲が拡大"
            }
        ],
        "notes": "じゃあ、どうすれば「信頼性の高いエルエルエムシステム」を作れるのか？筆者さんは、問題の複雑さによって、最適な方法があると考えているのだ。\n***複雑なシステム**には、コードを使ったワークフロー（ランググラフとか）がいちばん良いのだ。\nこれまで専門知識が必要だったけど、エーアイがコードを自動で生成してくれる技術が進歩すれば、このハードルも低くなるはずなのだ。\n***シンプルな問題**では、プロンプトとツールを組み合わせた「ノーコードエージェント」で十分な性能が出せるようになってきたのだ。\nエーアイモデルの性能が上がれば、もっといろんな問題が解決できるようになるはずなのだよ。",
        "slidenum": 22,
        "start_ms": 583727,
        "end_ms": 634479
    },
    {
        "type": "diagram",
        "title": "「挟み撃ち」状態のビジュアルビルダー",
        "subhead": "シンプルな問題はノーコードエージェント、複雑な問題はコードに優位性を奪われる",
        "lanes": [
            {
                "title": "ノーコードエージェント",
                "items": [
                    "シンプルな問題解決"
                ]
            },
            {
                "title": "ビジュアルワークフロービルダー",
                "items": [
                    "中程度の複雑性"
                ]
            },
            {
                "title": "コードによるワークフロー",
                "items": [
                    "複雑な問題解決"
                ]
            }
        ],
        "notes": "このように、ビジュアルワークフロービルダーは、簡単な問題解決ではノーコードエージェントに、複雑な問題解決ではコードによるワークフローに、それぞれ良いところを奪われて、ちょうど挟み撃ちの状態にあるって筆者さんは言っているのだ。",
        "slidenum": 23,
        "start_ms": 634479,
        "end_ms": 652973
    },
    {
        "type": "cards",
        "title": "LangChainが今後注目する2つの課題",
        "columns": 2,
        "items": [
            {
                "title": "真のエージェント作成法",
                "desc": "ノーコードで[[信頼性の高い真のエージェント]]を簡単に作る方法の探求"
            },
            {
                "title": "コード生成AIの性能向上",
                "desc": "LLMがワークフローやエージェントを自動生成する能力を高め、[[開発のハードルを下げる]]"
            }
        ],
        "notes": "ラングチェーンがこれから注目していくのは、以下の2点なのだ。\n1.ノーコードで「信頼性の高い真のエージェント」を簡単に作る方法を考えること。\n2.エルエルエムを活用してワークフローやエージェントを生成する「コード生成エーアイ」の性能をもっと上げること。",
        "slidenum": 24,
        "start_ms": 652973,
        "end_ms": 676316
    },
    {
        "type": "quote",
        "text": "エーアイがコードを書いてくれる未来、楽しみなのだ！ぼくももっと勉強して、そんなすごいエーアイを使いこなせるようになりたいなのだ！",
        "author": "ずんだもん",
        "notes": "ラングチェーンは、今あるノーコードワークフロービルダーも評価しつつ、もっと本質的なエーアイシステムの開発方法に焦点を当てているのだね。\nうーん、ぼくもビジュアルでポチポチするの好きだけど、複雑になるとごちゃごちゃになっちゃうのはわかるのだ。\nずんだもん技術室でも、簡単なのはノーコードで、複雑なのはコードでちゃんと作るようにしてるなのだ。\nエーアイがコードを書いてくれる未来、楽しみなのだ！ぼくももっと勉強して、そんなすごいエーアイを使いこなせるようになりたいなのだ！",
        "slidenum": 25,
        "start_ms": 676316,
        "end_ms": 714910
    },
    {
        "type": "content",
        "title": "本日のまとめ",
        "points": [
            "**CodeMender**: AIが自動でコードの脆弱性を修正",
            "**AIエージェントの成功**: モデル性能だけでなく、コンテキストやセキュリティ等の[[周辺システムが重要]]",
            "**LangChainの未来**: ビジュアルビルダーより、[[真のエージェント作成法]]と[[コード生成AI]]に注力"
        ],
        "notes": "----さあ、あっという間にお別れの時間なのだ！今日わ、エーアイが自動でコードのぜいじゃくせいを修正してくれる「コードメンダー」のお話と、エーアイエージェントを実際に使う上で、エーアイモデルだけじゃなくて周辺のシステムが大事だよっていうお話。\nそれから、ラングチェーンチームが考えるこれからのエーアイ開発の方向性について、3つの記事を紹介したのだ。\nエーアイの技術は、本当にすごいスピードで進化しているなのだ！これからも、ずんだもん技術室エーアイ放送局では、みんなが「へぇー！」って思うような最新情報や、面白い話題をたくさんお届けしていくのだ！",
        "slidenum": 26,
        "start_ms": 714910,
        "end_ms": 762711
    },
    {
        "type": "closing",
        "notes": "この番組の感想や、ずんだもんへのメッセージなんかも、いつでも待っているのだ！どんどん送ってほしいのだ！それでは、また次回の放送で会えるのを、楽しみにしているのだ！\nぼく、ずんだもんだったのだ！バイバイなのだー！",
        "slidenum": 27,
        "start_ms": 762711,
        "end_ms": 781320
    }
]