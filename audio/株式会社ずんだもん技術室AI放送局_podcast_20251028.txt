こんちにわ！ぼくはずんだもんだなのだー！「株式会社ずんだもん技術室エーアイ放送局」、今日も元気にオープンしたのだ！今日わ、2025年10月28日火曜日なのだ。
秋も深まってきて、なんだかワクワクするのだ！今日も、世の中で話題になっているトレンドの記事を、ぼくずんだもんがピックアップして紹介していくのだ。
最後まで楽しんでいってほしいのだ！今日わ、とっておきの記事を4つも用意しているのだ！どれもこれも、ぼくみたいな技術室のエンジニアが「おっ！」ってなるような面白い話題ばかりなのだよ。
それではさっそく、最初の記事なのだ！
----最初は、「【クロード】エージェントスキルズ入門-はじめてのスキル作成-」という記事なのだ。
この頃わ、ギットハブコパイロットみたいにエーアイが開発を手伝ってくれるツールが増えてきたのだ。
そして、生成エーアイの「クロード」にも「エージェントスキルズ」っていう新機能が追加されたのだって！これが、なんだかすごい機能なのだよ。
簡単に言うと、クロードに新しい「専門スキル」を教え込めるのだって！例えば、プロジェクトごとに決まっているコミットメッセージのルールを教えたら、クロードがそれに沿ったメッセージを自動で作ってくれるようになるのだ。
すごいのだ！エージェントスキルズが何がすごいのかっていうと、まずわ「機能拡張と特化」なのだ。
プロジェクトに合わせて、クロードに独自の機能や知識を教えられるのだよ。
それから、「繰り返し作業の削減」にもなるのだ。
一度スキルを作れば、クロードが自動で使ってくれるから、同じ指示を何度も入力する手間が省けるのだって。
まるで賢いアシスタントが意図を汲んで動いてくれるみたいだね。
そして一番すごいのが、「効率的な処理」なのだ！たくさんのスキルを教えても、クロードが賢く情報を管理してくれるのだよ。
必要な時だけスキルの中身を読み込む「プログレッシブディスクロージャー」っていう仕組みのおかげで、エーアイが処理する情報量が増えすぎないから、いつもスムーズに動くのだ。
これは、これまでのエーアイの拡張方法と大きく違うところなのだって。
スキルを作るのも意外とシンプルで、専用のフォルダに「スキルドットエムディー」っていうファイルを作って、スキルを定義するだけなのだ。
アントロピクス社が提供するツールを使えば、初めてでも簡単に作れるのだよ。
エーアイに新しいスキルを教え込むって、まるでぼくがずんだアローに変身するみたいで、ロマンがあるのだ！ぼくもこのエージェントスキルズを使って、技術室の仕事をもっと効率化できないか考えてみるのだ！
----続いての2つ目の記事なのだ！タイトルは「ランググラフとニーモエージェントツールキットではじめるリーアクトエージェント」なのだ。
最近わ、大規模言語モデル、つまりえるえるえむの進化で、エーアイが自分で考えて外部ツールを使って複雑な作業をこなす「エーアイエージェント」っていうのが注目されているのだ。
これわ、ただ文字を作るだけじゃなくて、現実世界の問題を解決するのに役立つかもしれないのだよ。
この記事でわ、「リーアクトエージェント」っていうやり方に注目しているのだ。
これわ、えるえるえむが「リーズニング（推論）」と「アクション（行動）」を繰り返すのがポイントなのだ。
ユーザーの指示に対して、まず次になにをすべきか考えて、必要なら「ツールコーリング」っていう機能を使って、ウェブで調べたり、今何時か調べたりするツールを選ぶのだ。
この推論とツールの実行を繰り返して、目標を達成していくのだって。
リーアクトエージェントを作るのには、ラングチェインから生まれた「ランググラフ」っていうツールが使われるのだ。
ランググラフのすごいところわ、エーアイの動きを「ノード」っていう処理の単位と「エッジ」っていうノードのつながりで、グラフみたいに作れることなのだ。
これによって、ループしたり、条件によって動きを変えたりする複雑なエーアイの処理も、わかりやすく柔軟に作れるのだよ。
さらに、「エヌビディア」のオープンソースツールキット「ニーモエージェントツールキット」も紹介されているのだ。
これわ、エーアイエージェントの開発から動かすところまでを助けてくれるのだよ。
ヤムルファイルを使って、エーアイやツール、えるえるえむの設定を簡単に決められるのだ。
それに、エーアイがどうやって考えて、どんなツールを使ったか、細かく見れる機能もあるから、開発者がエーアイの機能を良くすることに集中できるようになるのだって。
エーアイが自分で考えて行動するって、まるでぼくがずんだアローになって、目標に向かって突き進むみたいで、すごくかっこいいのだ！こういうツールキットがあると、ぼくみたいなエンジニアも、もっと簡単にエーアイエージェントを作れるようになるのだね。
開発の現場が楽しくなりそうなのだ！
----3つ目の記事なのだ！タイトルは「エーアイエージェントわなぜ複雑なタスクを完遂できないのか？〜コンテキストエンジニアリング＋マルチエージェント化で解く最新研究〜」なのだ。
自律型エーアイエージェントって、人間みたいに考えて行動できるって期待されてるのだ。
でも、難しい指示を与えると、途中で「何をすべきだったっけ？」って忘れちゃって、最後まで仕事をやり遂げられないことがあるのだって。
これわ、エーアイがたくさんの情報を処理し続けるうちに、最初にあった指示と、途中でやる具体的な作業や周りの情報が、一つの「コンテキスト」、つまり文脈や記憶みたいなものとして管理しきれなくなって、ごちゃごちゃになっちゃうのが原因なのだ。
この問題を解決するために、「コンテキストエンジニアリング」っていうアプローチが注目されているのだ。
これわ、エーアイエージェントが持っているコンテキストを賢く管理する方法で、「アイソレイトコンテキスト」、つまりコンテキストを分けるのが特に有効なのだって。
簡単に言うと、一つのエーアイエージェントに全部やらせるんじゃなくて、役割ごとに複数のエーアイエージェントに仕事を分担させることで、それぞれが担当するコンテキストをシンプルにして、効率よくタスクを進めようっていう考え方なのだ。
具体的な解決策が3つ紹介されているのだよ。
一つ目わ「プランアンドアクト」で、大まかな計画を立てるエーアイと、それを実行するエーアイに分けるのだ。
二つ目わ「階層型マルチエージェント」で、司令塔のエーアイが大きな指示を細かく分けて、それぞれ専門のエーアイに任せるのだ。
そして三つ目わ「特化型の専門家エーアイへの分解」で、データ分析専門とか、コード生成専門とか、特定の役割に特化したエーアイをあらかじめ用意しておくのだ。
これらの方法で、コンテキストをちゃんと管理すれば、エーアイエージェントも複雑な指示を忘れずに、最後までタスクをやり遂げられるようになるのだって！なるほどなのだ！ぼくの技術室でも、何か大きなプロジェクトをやる時にわ、複数のずんだもんが協力して、それぞれ得意なことを分担するみたいなイメージなのだね！
これわ、エーアイ開発にとって、すごく大事な考え方なのだ。
ぼくも技術室で実践してみたいのだ！
----さあ、いよいよ最後の記事なのだ！タイトルは「サイゼリヤのセルフオーダー、プログラミング初心者のアプリみたいだけど大丈夫そう…？→いや異常な要件定義の精度でユーエックスの本質を理解している」なのだ。
みんな、サイゼリヤに行ったことあるかな？最近、セルフオーダーシステムが導入されたんだけど、「シンプルすぎて、プログラミング初心者が作ったアプリみたいだね」って、ちょっと話題になったのだって。
でも、多くのエンジニアさんたちわ、その見た目とは裏腹に、「要件定義」と「ユーエックス（ユーザー体験）」の、すごーく大事なところを深く理解しているって評価しているのだよ。
なんでかっていうと、まず紙のメニューとちゃんと連携しているのだ。
それから、番号を入力するだけで簡単に注文できるし、みんなのスマホの性能に左右されずに、サクサク軽快に動くのだって。
利用する人が使いやすいか、お店の回転率が良くなるか、っていうのを一番に考えて作られているのだ。
開発やメンテナンスにかかるコストも考えているから、まさに「シンプルイズベスト」な設計なのだって、エンジニアの間で感心を集めているのだよ。
見た目がシンプルだからって、それがダメってことわ全然ないのだね。
むしろ、本当に必要な機能だけを厳選して、誰でも使いやすくするっていうのが、開発でわ一番難しいことだったりするのだ。
これは、ぼくたち技術室のエンジニアにとっても、すごく学ぶべきことが多いのだ。
例えば、ずんだ餅のオーダーシステムを作るとしたら、どうしたらみんなが一番ハッピーになるか、ぼくも真剣に考えるのだ！
----今日もあっという間におしまいの時間なのだ！今日はね、「クロード」の「エージェントスキルズ」でエーアイに専門スキルを教える話、それから「ランググラフ」と「ニーモエージェントツールキット」で「リーアクトエージェント」を作る話、そしてエーアイエージェントが複雑なタスクを最後までやれない問題と、その解決策としての「コンテキストエンジニアリング」と「マルチエーアイエージェント化」の最新研究、最後にわサイゼリヤのセルフオーダーがなぜすごいのか、っていう記事を紹介したのだ！
どれもこれも、これからの技術がもっと面白くなるような話題ばかりだったのだね。
ぼくも、みんなのお役に立てるような技術を、もっともっと頑張って開発していくのだ！この番組わ、リスナーさんからの感想をいつでも募集しているのだ。
どんな些細なことでもいいから、ぜひぼくに聞かせてほしいのだ！それでは、また次の放送で会えるのを楽しみにしているのだ！バイバイなのだー！
