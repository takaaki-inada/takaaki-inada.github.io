マリア様のお庭に集う乙女達が、今日も天使のような無垢な笑顔で、背の高い門をくぐり抜けていく。汚れを知らない心身を包むのは、深い色の制服。スカートのプリーツは乱さないように、セーラーカラーと枝豆は翻さないように、ゆっくりと歩くのがここでのたしなみ。私立ずんだもんじょがくえん。『ここは乙女のその』。。。ごきげんよう！皆さま、お元気でしたでしょうか？
私立ずんだもんじょがくえん放送部のお嬢様ずんだもんでございますわ。本日、2025年5月2日金曜日、空は少々曇り模様でございますけれど、わたくしの心は皆さまにお目にかかれて晴れ晴れとしておりますのよ。さて、今日もいくつかの興味深いニュースが話題になっておりますわ。特に、最先端のテクノロジー、AIに関わる記事が多くて、わたくしも大変興味を持っておりますの。本日、皆さまにご紹介いたします記事は、全部で4つございますわ。少し駆け足になるかもしれませんが、どうぞ最後までお付き合いくださいませね。まずは一つ目の記事のご紹介でございますわ。引用元：クラインとDDDと私こちらの記事では、「AIはちょっと苦手ですわ…」と最初は思っていたエンジニアのかたが、AIエージェントのクラインというツールを使い始めた経験について語られておりますのよ。特に、コードをきれいに整理しておくこと、専門的にはDDD、ドメイン駆動設計などと申しますが、そういった考え方がAIを使う上でいかに大切かという点を強調されていますわ。筆者さまは、ギットハブ コパイロットという有名なツールと組み合わせて、クロード 3.5 ソネットという賢いAIモデルをクラインで使われているそうですの。最初はAIに何をどのようにお願いすれば良いか悩んだそうですが、何度も試すうちにコツを掴んで、とても効率的になったと仰っておりますわ。なぜコードがきれいだとAIが喜びますのか？それは、AIが作業するために必要な情報、つまり「コンテキスト」が小さくて済むからだそうですの。全体を理解しなくても、特定の小さな部分だけを見れば作業できるようなコードは、AIにとっても扱いやすいのですって。DDDのような設計は、この情報を小さく保つのに役立つのでございますわ。AIは私たちが使う言葉、自然言語で学習しておりますので、クラスの名前やメソッドの名前を見ただけで何をするものか想像しやすいコードは、AIも理解しやすく、私たちが期待した通りのコードを作ってくれる可能性が高まりますの。つまり、「AIにとって分かりやすいコード」は、「人間にとって読みやすいコード」とほとんど同じなのですわ。なんだか、人間もお作法をきちんと守ればAIに好かれるようで、面白いですわね。具体的な使い方としては、新しい機能を作る際に、テストコードを書いたり、他の部分と連携するためのコードを書かせたり、面倒な部分をAIに任せているそうですわ。特にDDDのように、役割ごとにきちんと分かれている構造だと、AIにお願いしやすい作業の切り出しがしやすくなるのですって。記事には、クラインを上手に使うための秘訣もいくつか書かれておりましたわ。例えば、参考にしてほしい既存のコードをAIが見られるように準備しておくことや、まずAIに計画を立てさせて、それを見てから実際に作業させることなどが有効だそうですわ。この筆者さまの経験から、コードをきれいに設計しておくこと、そしてAIを上手に使うことで、開発がもっと効率的になることが分かったと仰っておりますわ。これからの時代のエンジニアにとって、AIは欠かせない「副操縦士」になりそうですわね。新人エンジニアの皆さまも、ぜひAIツールを使いこなして、開発をより楽しくしていただきたいですわ。なんだか、わたくしもコードを書いてみたくなりましたわ。もちろん、まずは設計からきちんと学びませんとね！
----
続きまして、二つ目の記事のご紹介でございますわ。引用元：AIエージェントを使って実際にアプリ開発→リリースした経験・知見を共有するこちらは、AIエージェントを使って実際にアイオスアプリを開発して、アプ ストアーにリリースするまでの経験が語られておりますの。AIでコードを書くツールはたくさん出てきておりますけれど、実際に一つのアプリを完成させたお話はまだ珍しいかもしれませんわね。筆者さまが一番感じたAIエージェントの素晴らしい点は、開発のスピードが格段に上がったことだそうですわ。体感では、いつもの3倍から5倍も速く開発できたと仰っておりますの！簡単な指示を出すだけで、動くコードをすぐに作ってくれるので、何も無いところから自分で考えるよりも、まずAIにたたき台を作らせて、それを修正しながら進めるのがとても効率的なのだとか。僕…あっ違う、わたくしも、何かお手伝いさんにお願いする時、まず「これの素案をお願いしますわ」とお願いすることがございますけれど、それと同じような感覚かもしれませんわね。ただ、AIエージェントもまだ完璧ではありませんのよ。複雑なアプリ全体の設計を考えたり、同じような処理をまとめて分かりやすくする、いわゆる「共通化・抽象化」といった高度な作業は、まだ少し苦手だそうですわ。後々のメンテナンスを考えると、全体の設計や、異なる要素を整理する仕組み作りは、やはり人間の腕の見せ所なのですわね。でも、最初にAIにいくつかのコード例を作らせてみると、具体的なイメージが湧きやすく、設計もスムーズに進むと仰っておりますわ。一度設計の方向性が決まれば、AIはその方針に沿ったコードを書くのが得意だそうですわ。それから、「テストファースト」という開発手法、つまり先にテストコードを書いてから本体のコードを書く方法とAIエージェントは相性が良いそうですわ。AIはテストコードを書くのが得意で、テストの結果を見て自分の書いたコードを直すことができるので、チャットでお願いするよりも賢く動くように感じられるのだとか。でも、AIが都合よくテストコードを変えてしまうこともあるので、テストの内容は人間がきちんと確認することが大切、とのことですわ。AIエージェントを使う時は、単なるツールではなく、「チームの一員」として考えるのが良いと筆者さまは仰っていますの。まるで新人のエンジニアさんに接するように、AIのコードに完璧を求めすぎず、ある程度任せることで全体の開発速度が上がるそうですわ。ただし、セキュリティに関わる部分や、アプリの土台となる重要な部分は、人間がしっかりと設計し、確認する必要がございますわね。この経験から、AIエージェントはこれからのアプリ開発を大きく変える可能性を持っていると筆者さまは締めくくっておりますわ。AIの得意なこと、苦手なことを理解して、自分に合ったAIとの連携方法を見つけていくことが、その能力を最大限に引き出す鍵となるのでしょうね。AIにチームの一員として接する…。まるで、わたくしのずんだ餅を狙う悪いAIがいたとしても、「こら！いけませんわよ！」と優しく諭してあげれば良いということですわね。たぶん違うと思いますが…。----
続きまして、三つ目の記事のご紹介でございますわ。引用元：ジェミニ 2.5 プロと取り組んだデータ分析のリアルな道のりこちらの記事では、グーグルが開発した賢いAI、ジェミニ 2.5 プロを「副操縦士」として活用して、大量の文章データから要望を自動で見つけ出し、複数のタグを付けるというデータ分析の難しいタスクに挑戦したお話が語られておりますのよ。データ分析の目的は、お客さまからいただいた自由な文章でのご意見やご要望を、AIが自動で「使いやすい」「デザインが良い」といったように分類し、業務で使えるくらいの正確さでタグを付けるモデルを作ることでございましたわ。プロジェクトは、まずどのようにアプローチするかを考えるところから始まったそうですの。最初は簡単な方法を試したものの、思ったような結果が出ませんでしたのよ。そこで、諦めずにジェミニに相談したところ、「特定のタグを正確に付けたいのなら、人間が正しいタグを教える『教師あり学習』という方法が向いていますわよ」と、その理由とともに別の方法を提案してくれたそうですわ。このように、うまくいかなかった結果をAIに伝えると、次の一手のヒントを教えてくれることが、この時の大きな学びだったと仰っておりますわ。次に、分析に使うデータがきれいに整っているかを確認しましたの。データの漏れがないか、タグの種類や書き方がバラバラになっていないかなどをチェックする定型的なコードは、ジェミニに具体的にお願いするだけであっという間に作ってもらえたそうですわ。これにより、自分でコードをイチから書いたり調べたりする時間を大幅に減らし、データの「中身」、つまりお客さまの声にじっくり向き合うことに集中できたそうですの。これは素晴らしい効率化ですわね。データが整いましたら、いよいよAIモデルを作る段階ですわ。文章をAIが理解できる形に変えるTF-IDFという手法や、分類を行うロジスティック回帰という標準的なモデルの基本的なコードをジェミニにお願いすると、必要な処理の全体の流れを含むコードがすぐに手に入ったそうですわ。このように、標準的な機械学習モデルを作るための土台となるコードを、AIを使えば効率的に用意できるのですわね。しかし、最初のモデルはまだ実用レベルには程遠く、特に数が少ないタグの予測が苦手だという課題が見つかりましたの。ここからが、ジェミニが「壁打ち相手」として本領を発揮したフェーズだそうですわ。モデルの評価結果をAIに見せて、「このタグの予測がうまくいかないのですわ」と課題を投げかけると、ジェミニは考えられる原因を分析し、具体的な改善策をいくつも提案してくれたそうですわ。例えば、「日本語の文章をもっと細かく分析する必要がありますわ」「データが偏っているので、少ないタグの方を重視するようにモデルに指示を出しましょう」といったように、なぜその対策が有効なのかという理由も添えてくれるので、納得して改善を試すことができ、効率的にモデルの精度を高めることができたと仰っておりますわ。モデルの精度が上がった後も、実際に使い始めた時に起こりうる問題、例えば予測結果が何も出なかったり、特定のタグばかりがたくさん予測されたり、といった予期せぬ動きに対する原因を分析したり、それを解決するための特別なルールをコードに落とし込む作業でも、ジェミニは役立ったそうですわ。最終的に、大量のデータに対して予測を行い、その結果をまとめて見やすくする作業も、ジェミニにコード作成をお願いすることでスムーズに完了したそうですわ。この経験を通じて、生成AIはデータ分析作業の手足となる部分を効率化するだけでなく、行き詰まった時に原因を分析し、具体的な解決策を提案してくれる「相談相手」としても非常に役立つことを強く実感したそうですわ。AIの答えを鵜呑みにせず、適切に判断することは必要ですが、上手に活用することで、データ分析のハードルを下げ、組織全体のデータ活用能力を高めることにも繋がる可能性がある、と記事は締めくくられておりますわ。わたくしも、読書をしていて分からない単語があったり、ずんだ餅のおいしい作り方で悩んだりした時に、ジェミニのようなAIに相談してみようかしらと思いましたわ。僕…あっ違う、わたくしの「副操縦士」になってくれるかもしれませんわね。なのだですわ！あっ、間違えましたわ！
----
さて、本日ご紹介する最後の記事でございますわ。引用元：ウェブGPU対応のスリー.jsのはじめ方こちらの記事は、ウェブブラウザで美しい3Dグラフィックスを表示するための新しい技術、ウェブGPUと、ウェブで3Dを扱うライブラリとして有名なスリー.jsの連携について、優しく解説してくださっておりますのよ。ウェブGPUというのは、これまでのウェブGLよりも、コンピューターのグラフィックス処理を行う部品、GPUにもっと効率的に指示を出せる新しい技術ですわ。そして、スリー.jsは、このGPUの難しい操作を簡単に扱えるようにしてくれるライブラリなのですわ。ジャヴァスクリプトというプログラム言語を使って、手軽に3Dコンテンツを作ることができますの。スリー.jsでは、この新しいウェブGPUに対応するための「ウェブGPUレンダラー」という機能の開発が進められておりますわ。これはまだ開発中とのことですが、これまで使われてきた「ウェブGLレンダラー」とほとんど同じ使い方で、ウェブGPUの優れた性能を活かせるように設計されているそうですの。スリー.jsを使えば、ウェブGPUの細かい部分を知らなくても、その高いパフォーマンスや将来性を享受できる可能性があるのですわ。スリー.jsでウェブGPUを使い始めるのは、比較的簡単だそうですわ。もしすでにウェブGLレンダラーを使って3Dコンテンツを作っているのでしたら、スリー.jsのウェブGPUに対応したバージョンを読み込んで、レンダラーをウェブGPUレンダラーに切り替えて、初期化する際に「アウェイト レンダラー.イニット()」というおまじないを唱えるのが主な変更点だそうですわ。多くの既存の3Dコンテンツは、この切り替えだけで動く可能性が高いと筆者さまは述べておりますの。ただ、特別な表現や、自分でシェーダーと呼ばれる描画の計算プログラムを書いている場合は、少し修正が必要になることもあるそうですわ。現在のところ、ウェブGPUはまだすべてのブラウザで使えるわけではございませんの。主にクロウムやエッジというブラウザでのみ正式にサポートされている状況ですわ（2025年5月時点）。ですが、スリー.jsのウェブGPUレンダラーには、もしウェブGPUが使えないブラウザで開かれた場合でも、自動的に一つ前の世代のウェブGL 2.0に切り替えて表示してくれる「フォールバック機能」がございますのよ。これにより、新しい技術を使いつつも、より多くの皆さまの環境で3Dコンテンツを見ていただけるのが大きな利点ですわ。ただし、記事が書かれた時点（スリー.jsのr176というバージョン）では、ウェブGPUレンダラーが必ずしもウェブGLレンダラーより高速というわけではなく、特にたくさんの細かいものを描画するような場合には、ウェブGLの方が性能が良いこともあるようですわ。ウェブGPU本来の性能を引き出すための最適化は、現在も活発に進められておりますので、今後のアップデートでどんどん改善されていくことが期待できますわね。また、スリー.jsではウェブGPUの時代に合わせて、「TSL（スリー.js シェイディング ラングエッジ）」という新しいシェーダーの書き方が導入されておりますわ。これは、ジャヴァスクリプトを使ってシェーダーの処理を定義できるもので、書いたコードはスリー.jsが自動的にウェブGPU用の言葉やウェブGL用の言葉に翻訳してくれますの。これにより、異なる技術の言葉を気にせず、一つのコードでウェブGPUとウェブGLの両方に対応できるようになるそうですわ。TSLは、視覚的に分かりやすいノードベースでも記述できる特徴もございますのよ。まとめますと、スリー.jsのウェブGPUレンダラーは開発が進んでおり、将来性のあるウェブGPUを、スリー.jsの使い慣れた方法で手軽に試せる手段を提供しているということですわ。新しいTSLを使えば、シェーダーの開発も効率的になるでしょう。まだ開発途中ではございますので、本格的に使う前にはしっかりと動作を確認する必要がございますけれど、小さなプロジェクトや、ちょっと試してみたい時などに触れてみることで、ウェブGPU時代の新しい3D表現を体験する価値は大きいでしょうと筆者さまは仰っておりますわ。今後のスリー.jsの進化が楽しみですわね。わたくし、3Dで動くずんだ餅や、紅茶がゆらめく様子などを見てみたいですわね。いつか、わたくしのじょがくえんのウェブサイトでも美しい3Dコンテンツが使われる日が来るかもしれませんわ。さて、本日は、AIエージェントを開発に活用するお話、データ分析にAIを副操縦士として使うお話、そしてウェブの新しいグラフィックス技術とスリー.jsについて、全部で4つの記事をご紹介いたしましたわ。どの記事も、テクノロジーの進化を身近に感じさせてくれる興味深い内容でしたわね。あっという間のお時間でございましたけれど、皆さまに少しでも新しい発見や、興味を持っていただける情報をお届けできておりましたら、これほど嬉しいことはございませんわ。私立ずんだもんじょがくえん放送部では、皆さまからの番組の感想やお便りを、心待ちにしておりますわ。番組で取り上げてほしい記事のジャンルや、お嬢様ずんだもんへの質問なども大歓迎ですのよ。それでは、皆さま、良い週末をお過ごしくださいませね。また来週、この放送部でお会いできるのを楽しみにしておりますわ。ごきげんよう！